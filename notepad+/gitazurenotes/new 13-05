$Data=Get-Content -Path F:\azure\sitepool.json |ConvertFrom-Json

#decalre empty array
$sites=@()
($Data.IISDeploy.Sites).ForEach{
    $sites+=$_.psobject.properties.name
}

#validate sites length should not be 0
if($sites.Length -ne 0)
{
    foreach($item in $sites)
    {
        Write-Host "Working on website: $item" -ForegroundColor Green
        ($j=$Data.IISDeploy.Sites)|Where-Object{$_.Name -eq $item}
            $sites=$j.$item.Name
            $port=$j.$item.port
            $physicalpath=($j.$item.physicalpath).Replace("/","\")
            $Apppool=$j.$item.Apppool

            if($Apppool.Length -ne 0)
            {
                Write-Host " Working on App-pool:$Apppool deployment" -ForegroundColor green
                ($i=$Data.IISDeploy.AppPools)| Where-Object{$_.name -eq $Apppool}
                # load the variables from json for specific app-pool
                    $pool=$i.$Apppool.name
                    $version=$i.$Apppool.version
                    $mode=$i.$Apppool.mode
                    $queuelength=$i.$Apppool.queuelength
                    $enable32bit=$i.$Apppool.enable32bit
                    $identity=$i.$Apppool.identitytype
                    $user=$i.$Apppool.user
                    $password=$i.$Apppool.password
                        #validate pool name if($pool -ne "" -and $pool -ne $null) -- former method
                if(-not ([string]::IsNullOrWhiteSpace($pool)))
                {
                    #import module webadministration
                    Import-Module webadministration
                    #test the app-pool  exist or not . if exist then delete or set mesaage
                    if(Test-Path IIS:\AppPools\$pool)
                    {
                        Write-Warning "The given App-pool:$pool already exist. Hence removing"
                        Remove-Item IIS:\AppPools\$pool -Force -Recurse -Verbose
                    }
                    else 
                    {
                        Write-Host "The given App-pool:$pool doesnot not exist. Hence creating new" -ForegroundColor Green
                    } 
                    
                    #create new webapppool
                    New-WebAppPool -Name $pool -Force
                    #load the above created app-pool into local varaible
                    $result=Get-Item IIS:\AppPools\$pool -Force
                
                    #validate managed runtime version
                    if(-not([string]::IsNullOrWhiteSpace($version)))
                    {
                        if(($version -eq "v2.0") -or ($version -eq "v4.0"))
                        {
                            $result.managedRuntimeversion=$version
                        }
                        elseif($version -eq "No Managed Code")
                        {
                            $result.managedRuntimeversion=""
                        }
                        else
                        {
                            Write-Error -Message "version value should be v2.0 or v4.0 or No Managed code" -ErrorAction Stop
                        }
                    }
                    else 
                    {
                        Write-Error -Message " version should not be empty" -ErrorAction Stop
                    }
                
                    #validate managed pipeline mode
                    if(-not([string]::IsNullOrWhiteSpace($mode)))
                    {
                        if(($mode -eq "Integrated") -or ($mode -eq "Classic"))
                        {
                            $result.ManagedPipelineMode=$mode
                        }
                        else 
                        {
                            Write-Error -Message "value should be Integrated or Classic" -ErrorAction Stop
                        }
                    }
                    else 
                    {
                        Write-Error -Message "Mode value should not be null or emtpy and value should be Integrated or Classic"
                    }
                    #validate queuelength
                    if(-not([string]::IsNullOrWhiteSpace($queuelength)))
                    {
                        if(([convert]::ToInt64($queuelength)-ge 10) -and ([convert]::ToInt64($queuelength) -le 65535))
                        {
                            $result.queuelength=[convert]::ToInt64($queuelength)
                        }
                        else 
                        {
                            Write-Error -Message "queuelength value should be between 10-65535" -ErrorAction stop
                        }
                    }
                    else 
                    {
                        Write-Error -Message "Queuelength value should not be null" -ErrorAction Stop
                    }
                    #validate enable32bit
                    if(-not([string]::IsNullOrWhiteSpace($enable32bit)))
                    {
                        if(("$enable32bit" -eq "True") -or ("$enable32bit" -eq "False"))
                        {
                            $result.enable32BitAppOnWin64=$enable32bit
                        }
                        else 
                        {
                            Write-Error -Message "Enable32bit value should be true|false or 1|0" -ErrorAction Stop
                        }
                    }
                    else 
                    {
                        Write-Error -Message "enable32bit values should not be null or empty" -ErrorAction stop
                    }
                
                    #validate identity
                    if(-not ([string]::IsNullOrWhiteSpace($identity)))
                    {
                        if($identity -eq "LocalSystem")
                        {
                            $result.Processmodel.Identitytype=$identity
                        }
                        elseif($identity -eq "LocalService")
                        {
                            $result.Processmodel.Identitytype=$identity
                        }
                        elseif($identity -eq "NetworkService")
                        {
                            $result.Processmodel.Identitytype=$identity
                        }
                        elseif($identity -eq "SpecificUser")
                        {
                            $computer=$env:COMPUTERNAME
                            Add-type -AssemblyName system.directoryservices.AccountManagement
                            $creds=New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext('machine', $computer)
                            $credstatus=$creds.ValidateCredentials($user, $password)
                            if($credstatus -eq "true")
                            {
                                $result.processModel.identityType="SpecificUser"
                                $result.processModel.userName=$user
                                $result.processModel.password=$password
                            }
                            else 
                            {
                                Write-Error -Message "Invalid credentials" -ErrorAction Stop
                            }
                        }
                        else
                        {
                            Write-Warning "No matching identitytype found .hence applying default" 
                            $result.Processmodel.identitytype="ApplicationPoolIdentity"
                        }
                    }
                    else
                    {
                        Write-Error -Message "Identiytype value should be LocalSystem or LocalService or NetworkService or SpecificUser or ApplicationPoolIdentity" -ErrorAction stop
                    }
                
                    $result |Set-Item -Force -Verbose
                }# end of main if pool
                else
                {
                    Write-Error -Message "Pool name should not be empty. Hence aborting execution" -ErrorAction Stop
                }
                
                    


            }
            else 
            {
                Write-Error -Message "Pool name should not be empty. Hence aborting the process" -ErrorAction stop
            }
            #valite sitename should not be empty
            if($sites.Length -ne 0)
            {
                #import the module webadministration
                Import-Module WebAdministration
                if(Test-Path IIS:\Sites\$sites)
                {
                    Write-Warning " the given site : $sites found .Hence deleting"
                    Remove-Item IIS:\Sites\$sites -Force -Recurse -Verbose
                }
                else
                {
                    Write-Host "No site found with name of :$sites. hence creating new" -ForegroundColor Green
                }

                #validate physicalpath 
                if($physicalpath.Length -ne 0)
                {
                    # test the physicalpath 
                    if(Test-path $physicalpath\$sites)
                    {
                        Write-Warning "Physicalpath :$physicalpath already exist .hence Deleting"
                        Remove-Item $physicalpath\$sites -Force -Recurse -Verbose
                    }
                    else
                    {
                        Write-Host "Physicalpath :$physicalpath\$site doesnot exit. Hence creating new" -ForegroundColor Green
                    }
                    #creating physicalpath
                    New-Item $physicalpath\$sites -ItemType Directory -Force -Verbose

                }
                else
                {
                    Write-Error -message "Physicalpath should not be null. please verify JOSN or declared variables "  -ErrorAction Stop
                } # end physicalpath condition

                #validate port and create newwebsite
                if($port.length -ne 0)
                {
                    New-Website -Name $sites -Port $port -PhysicalPath $physicalpath -ApplicationPool $pool -Force -ErrorAction Stop
                }
                else
                {
                    Write-Error "Port numbe should not be empty .hence aborting the process" -ErrorAction Stop
                }
            }
            else
            {
                Write-Error -Message "Site name should not be null or empty" -ErrorAction Stop
            }
            
    }
}
else
{
    Write-Error -Message "Sites length should not Zero. please verify JSON" -ErrorAction stop
}
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
{
    "IISDeploy":{
        "AppPools":[
            {"Raja":{"name":"Raja","version":"v2.0","mode":"Classic","queuelength":4444,"enable32bit":true,"identitytype":"LocalSystem","user":"","password":""}},
            {"Shekar":{"name":"Shekar","version":"v4.0","mode":"Integrated","queuelength":5555,"enable32bit":false,"identitytype":"SpecificUser","user":"vg","password":"Apple@1234"}},
            {"Reddy":{"name":"Reddy","version":"v2.0","mode":"Classic","queuelength":6666,"enable32bit":true,"identitytype":"LocalService","user":"","password":""}},
            {"CRSR":{"name":"CRSR","version":"v4.0","mode":"Integrated","queuelength":7777,"enable32bit":false,"identitytype":"SpecificUser","user":"vg","password":"Apple@1234"}},
            {"SIVA":{"name":"SIVA","version":"v2.0","mode":"Classic","queuelength":9999,"enable32bit":true,"identitytype":"SpecificUser","user":"vg","password":"Apple@1234"}}
        ],
        "Sites":[
            {"Google":{"Name":"Google","port":85,"physicalpath":"F:/azure/IIS/Sites","Apppool":"Raja"}},
            {"Microsoft":{"Name":"Microsoft","port":81,"physicalpath":"F:/azure/IIS/Sites","Apppool":"Shekar"}},
            {"CTS":{"Name":"CTS","port":82,"physicalpath":"F:/azure/IIS/Sites","Apppool":"Reddy"}},
            {"Eron":{"Name":"Eron","port":83,"physicalpath":"F:/azure/IIS/Sites","Apppool":"CRSR"}},
            {"GL":{"Name":"GL","port":84,"physicalpath":"F:/azure/IIS/Sites","Apppool":"SIVA"}}
            

        ]  
    }
}