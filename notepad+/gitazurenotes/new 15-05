#Load the data from JSON
$Data=get-content D:\Devops\AZ-800\apppool.json|ConvertFrom-Json

#Declare empty array for sites
$sites=@() # empty array means 0 objects

#let gather sites information from JSON
($Data.IISDeploy.Sites).ForEach{
    $sites+=$_.psobject.properties.name
}

#validate sites.length
if($sites.Length -ne 0){
    foreach($item in $sites){
        Write-host "Working on Site : $item deployment" -foregroundcolor green
        ($j=$Data.IISDeploy.Sites)|Where-Object {$_.Name -eq $item}

            $site=$j.$item.Name
            $port=$j.$item.port
            $physicalpath=($j.$item.physicalpath).Replace("/","\")
            $Apppool=$j.$item.Apppool
            $anonymous=$j.$item.Anonymous
            $windows=$j.$item.windows

            # validate app-pool name and initate the process for app-pool deployment
            if($Apppool.Length -ne 0){
                # load the app-pool information from JSON
                ($i=$Data.IISDeploy.AppPools)|Where-Object{$_.Name -eq $Apppool}
                
                    Write-Host "Working on App-pool :$item" -ForegroundColor Green
                    # load the variables from json for specific app-pool
                    
                    $pool=$i.$Apppool.Name
                    $version=$i.$Apppool.version
                    $mode=$i.$Apppool.mode
                    $queuelength=$i.$Apppool.queuelength
                    $enable32bit=$i.$Apppool.enable32bit
                    $identity=$i.$Apppool.identity
                    $user=$i.$Apppool.user
                    $password=$i.$Apppool.password
            
                    #validate pool name if($pool -ne "" -and $pool -ne $null) -- former method
            if(-not ([string]::IsNullOrWhiteSpace($pool))){
                #import module webadministration
                Import-Module webadministration
                #test the app-pool  exist or not . if exist then delete or set mesaage
                if(Test-Path IIS:\AppPools\$pool){
                    Write-Warning "The given App-pool:$pool already exist. Hence removing"
                    Remove-Item IIS:\AppPools\$pool -Force -Recurse -Verbose
                }
                else {
                    Write-Host "The given App-pool:$pool doesnot not exist. Hence creating new" -ForegroundColor Green
                } 
                
                #create new webapppool
                New-WebAppPool -Name $pool -Force
                #load the above created app-pool into local varaible
                $result=Get-Item IIS:\AppPools\$pool -Force
            
                #validate managed runtime version
                if(-not([string]::IsNullOrWhiteSpace($version))){
                    if(($version -eq "v2.0") -or ($version -eq "v4.0")){
                        $result.managedRuntimeversion=$version
                    }
                    elseif($version -eq "No Managed Code"){
                        $result.managedRuntimeversion=""
                    }
                    else{
                        Write-Error -Message "version value should be v2.0 or v4.0 or No Managed code" -ErrorAction Stop
                    }
                }
                else {
                    Write-Error -Message " version should not be empty" -ErrorAction Stop
                }
            
                #validate managed pipeline mode
                if(-not([string]::IsNullOrWhiteSpace($mode))){
                    if(($mode -eq "Integrated") -or ($mode -eq "Classic")){
                        $result.ManagedPipelineMode=$mode
                    }
                    else {
                        Write-Error -Message "value should be Integrated or Classic" -ErrorAction Stop
                    }
                }
                else {
                    Write-Error -Message "Mode value should not be null or emtpy and value should be Integrated or Classic"
                }
                #validate queuelength
                if(-not([string]::IsNullOrWhiteSpace($queuelength))){
                    if(([convert]::ToInt64($queuelength)-ge 10) -and ([convert]::ToInt64($queuelength) -le 65535)){
                        $result.queuelength=[convert]::ToInt64($queuelength)
                    }
                    else {
                        Write-Error -Message "queuelength value should be between 10-65535" -ErrorAction stop
                    }
                }
                else {
                    Write-Error -Message "Queuelength value should not be null" -ErrorAction Stop
                }
                #validate enable32bit
                if(-not([string]::IsNullOrWhiteSpace($enable32bit))){
                    if(("$enable32bit" -eq "True") -or ("$enable32bit" -eq "False")){
                        $result.enable32BitAppOnWin64=$enable32bit
                    }
                    else {
                        Write-Error -Message "Enable32bit value should be true|false or 1|0" -ErrorAction Stop
                    }
                }
                else {
                    Write-Error -Message "enable32bit values should not be null or empty" -ErrorAction stop
                }
            
                #validate identity
                if(-not ([string]::IsNullOrWhiteSpace($identity))){
                    if($identity -eq "LocalSystem"){
                        $result.Processmodel.Identitytype=$identity
                    }
                    elseif($identity -eq "LocalService"){
                        $result.Processmodel.Identitytype=$identity
                    }
                    elseif($identity -eq "NetworkService"){
                        $result.Processmodel.Identitytype=$identity
                    }
                    elseif($identity -eq "SpecificUser"){
                        $computer=$env:COMPUTERNAME
                        Add-type -AssemblyName system.directoryservices.AccountManagement
                        $creds=New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext('machine', $computer)
                        $credstatus=$creds.ValidateCredentials($user, $password)
                        if($credstatus -eq "true"){
                            $result.processModel.identityType="SpecificUser"
                            $result.processModel.userName=$user
                            $result.processModel.password=$password
                        }
                        else {
                            Write-Error -Message "Invalid credentials" -ErrorAction Stop
                        }
                    }
                    else{
                        Write-Warning "No matching identitytype found .hence applying default" 
                        $result.Processmodel.identitytype="ApplicationPoolIdentity"
                    }
                }
                else{
                    Write-Error -Message "Identiytype value should be LocalSystem or LocalService or NetworkService or SpecificUser or ApplicationPoolIdentity" -ErrorAction stop
                }
            
                $result |Set-Item -Force -Verbose
            }# end of main if pool
            else{
                Write-Error -Message "Pool name should not be empty. Hence aborting execution" -ErrorAction Stop
            }
            
                
            }
            else{
                Write-Error -Message "Apppool cannot be empty. please validate JSON. Process getting aborted" -ErrorAction Stop
            }

            #begin site deployment
            if($site.Length -ne 0){
                Import-Module webadministration
                if(Test-Path IIS:\Sites\$site){
                    Write-warning "Sites already exist with name: $site. Hence deleting" 
                    Remove-item IIS:\Sites\$site -Force -Recurse -Verbose
                }
                else{
                    Write-Host "No Site found with name of $site. hence creating new" -ForegroundColor Green
                }
                #validate physicalpath
                if(Test-Path $physicalpath\$site){
                    Write-Warning " Physcialpath : $physicalpath\$site already exist. Hecne removing"
                    Remove-Item $physicalpath\$site -Force -Recurse -Verbose
                }
                else{
                    Write-Host " No physcialpath found .Hence creating new" -ForegroundColor Green
                }

                New-Item $physicalpath\$site -ItemType Directory -Force -Verbose
                #validate port
                if(($port.Length -ne 0) -and ([convert]::ToInt16($port) -ge 80)){
                    #create website
                    New-Website -Name $site -Port $port -PhysicalPath $physicalpath\$site -ApplicationPool $Apppool -Force -ErrorAction stop
                }
                else{
                    Write-Error -Message "Port value must be set" -ErrorAction Stop
                }

                # apply Anonymous authentication
                if($anonymous.length -ne 0){
                    if("$anonymous" -eq "True" -or "$anonymous" -eq "false"){
                        Set-WebConfigurationProperty -Name enabled -Filter system.webServer/security/authentication/anonymousAuthentication -Value $($anonymous) -PSPath IIS:\Sites\ -Location $site -Force -ErrorAction Stop -Verbose
                    }
                    else{
                        Write-Warning "Invalid input provided . value must be true or false"
                    }
                }
                else{
                    Write-Error -message "Anonymous aunthentication value must be set" -ErrorAction Stop
                }
                # apply windows authentication
                if($windows.length -ne 0){
                    if($windows -eq "windows"){
                        Set-WebConfigurationProperty -Name enabled -Filter system.webServer/security/authentication/windowsAuthentication -Value $true -PSPath IIS:\Sites\ -Location $site -Force -ErrorAction Stop -Verbose
                    }
                    elseif($windows -eq "basic"){
                        Set-WebConfigurationProperty -Name enabled -Filter system.webServer/security/authentication/basicAuthentication -Value $true -PSPath IIS:\Sites\ -Location $site -Force -ErrorAction Stop -Verbose
                    }
                    elseif($windows -eq "digest"){
                        Set-WebConfigurationProperty -Name enabled -Filter system.webServer/security/authentication/digestAuthentication -Value $true -PSPath IIS:\Sites\ -Location $site -Force -ErrorAction Stop -Verbose
                    }
                    elseif($windows -eq "windowsbasic" -or $windows -eq "windowsandbasic"){
                        Set-WebConfigurationProperty -Name enabled -Filter system.webServer/security/authentication/windowsAuthentication -Value $true -PSPath IIS:\Sites\ -Location $site -Force -ErrorAction Stop -Verbose
                        Set-WebConfigurationProperty -Name enabled -Filter system.webServer/security/authentication/basicAuthentication -Value $true -PSPath IIS:\Sites\ -Location $site -Force -ErrorAction Stop -Verbose
                    }
                    else{
                        Write-warning "Windows authentication value must be windows, basic, digest, windowsbasic or windowsandbasic"
                    }
                
                }
                else {
                    Write-Error -Message "Windows Authentication value must be set" -ErrorAction stop
                }

            }
            else {
                Write-Error -message "Site name cannot be empty. Hence aborting the process" -ErrorAction stop            }
            
    }
}
else {
    Write-Error -Message "Sites length should not be zero. hence aborting the process" -ErrorAction Stop
}